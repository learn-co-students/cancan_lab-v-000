exit
note.user
note.readers
note
exit
self.readers.map {|user| user.name}.join(", ")
self.readers.map {|user| user.name}.join
self.readers.map {|user| user.name}
exit
self.readers.map {|user| user.name}
self.readers
self.viewers.map {|user| user.name}
self.viewers.map do |user| 
self.viewers.map do |user|
self.viewers.pluck(:name)
self.viewers
self
exit
self
exit
!User.find_by(name: @user.name)
User.find_by(name: @user.name)
User.all
!User.find_by(name: @user.name)
exit
@note.readers
@note
exit
@note.readers
@note.reader
exit
name
Viewer.where(user_id: 155)
Viewers.where(user_id: 155)
@reader
@reader.viewers
@reader.viewable
@reader.readable
@reader
self.readers
assert self.readers == [users(:alice), users(:beth)]
      assert note.readers == [users(:alice), users(:beth)]
self.readers
exit
self.readers
self
exit
self.readers
self
@reader.viewers
@reader.readable
@reader.note
@reader
exit
@note.readers
exit
@note.readers
@note
exit
@note.readers
exit
@note.readers
@note.readers.pluck(:name)
@note.readers
exit
@note.readers.pluck(:name)
exit
@note.readers.pluck(:name)
@note.readers
exit
@note.readers
@note
exit
@note.readers
exit
@note.readers
@note.readrtd
@note.readers
@note
name.empty?exit
name.empty?
naem.empty?
name
exit
   15:       end
   14:         @reader = self.readers.find_or_create_by(name: name)
 name.map do |name|
name.flatten
name.empty?
name.blank?
name.empty?
name
