c
note.readers == [beth, alice]
note.readers == [alice, beth]
note.readers
beth
alice
c
alice
@note.readers
@note.content
c
params
c
@note=Note.find(params[:id])
params
c
@note.user
@note.readers
c
Viewer.all
Viewers.all
@note.readers << @user
@note=@user.notes.last
@user.viewers
@user.notes.last.readers
@user.notes.last
@user.notes
Viewer.last
@user.notes.build(note_params)
@user=current_user
@user
@user.notes.build(note_params)
@note.readers.build(user: @current_user)
@note.readers.build(@current_user)
@note=Note.create(note_params)
c
@note.readers
Viewer.new(note_id: @note.id, user_id: @note.user.id)
Viewer.new(@note, @note.user)
@note.readers
@note.user
@note.viewers 
@note.viewers << @current_user
@note.readers
@note.user=@current_user
@note.user
@note
@note.user=@current.user
@note.readers
@note=Note.create(note_params)
note_params
c
@current_user
logged_in?
q
current_user
logged_in?
session[:user_id]
c
logged_in?
c
session
session[:id]
session[:user_id]
logged_in?
c
logged_in?
c
params
exit
Note.create(notes_params)
note.create(notes_params)
notes_params
note_params
params
q
n
q
self
current_ability
current_user
params
user
q
n
post :create
q
post :create
q
can :read, Note, user: user
user
q
Note.last.user
Note.last
Note.all
Note
q
private_notes.first
exit
private_notes[:alice].user
private_notes[:alice]
private_notes.[:alice]
private_notes.[name]
private_notes.first
private_notes.first.user
private_notes.first
private_notes.last.user
private_notes
users
exit
Note.all
n=Note.first
user
q
n=Note.last
user
q
qy
Note.all
n=Note.last
q
n=Note.last
user
q
User.find_by(user: n.user)
m=User.new
user.object_id
user
User.find(n.user)
User.where(n.user)
n.user
n=Note.last
n=Note.where(user: user)
n=Note.where(user: user).first
n=Note.last
user.can? :read
user
q
user
abilities["alice"].can? :read, private_notes["alice"]
users.first.can? :read, private_notes["alice"]
users.first
c
q
user
user.name
q
Note.last.user
Note.last
user.name
q
user
self
q
self.readers.collect{|r| r.name}.join(", ")
self.readers.collect{|r| r.name}.join
c
note.readers
self
q
n
c
end
visible_to.split(", ").each do |u| self.readers << find_or_create_by(name: u)
visible_to.split(", ").each do |u|
visible_to.split(", ")
self.readers << find_or_create_by(name: 
self
visible_to
c
q
y
q
User.all
pp User.all
User.count
c
User.count
c
User.all
c
User.all
q
users(:alice)
note.readers.first == users(:alice)
note.readers
c
self.readers.first == users(:alice)
self.readers
c
users(:alice)
note
self
c
users(:alice)
self.readers
c
note
self
c
self.readers
self
visible_to.split(", ").each{|u| self.readers.build(name: u).save}
visible_to.split(", ").each do |u|
visible_to.split(", ").each{|u| self.readers.build(name: u) self.save }
visible_to.split(", ")
visible_to
